# Nmake macros for building Windows 32-Bit apps
CPU=i386

TARGET_CPU=i386
#TARGET_CPU=i860
#TARGET_CPU=m68k
#TARGET_CPU=ns32k
#TARGET_CPU=sparc
#TARGET_CPU=vax

TARG=config\$(TARGET_CPU)

# Watcom Flags
#
# 386 stack calling conventions
# force enums to be type int
# set debug output format Watcom
# pack structure members with alignment 8
#
#
CFLAGS=  -3s -ei -hw -zp=8 /I. /Iconfig
#zpack 8 isnt on watcom 10
#CFLAGS=  -3s -ei -hw /I. /Iconfig

CC = wcc386

link = link

CC1OBJ = c-tab.obj c-decl.obj c-typeck.obj c-conv.obj toplev.obj version.obj \
	tree.obj print-tree.obj stor-layout.obj fold-const.obj rtl.obj rtlanal.obj \
	expr.obj stmt.obj expmed.obj explow.obj optabs.obj varasm.obj symout.obj \
	dbxout.obj sdbout.obj emit-rtl.obj integrate.obj jump.obj cse.obj \
	loop.obj flow.obj stupid.obj combine.obj regclass.obj local-alloc.obj global-alloc.obj \
	reload.obj reload1.obj caller-save.obj final.obj recog.obj pragma.obj \
	errno.obj

CC1INSNOBJ = insn-emt.obj insn-xrt.obj insn-out.obj insn-pep.obj insn-rcg.obj \
	obstack.obj

CC1DEPS = insn-flags.h insn-codes.h insn-config.h insn-emt.c insn-pep.c insn-rcg.c \
	insn-xrt.c insn-out.c insn-out.obj

CCCPOBJ = cccp.obj cexp.obj version.obj obstack.obj alloca.obj

!IF "$(TARGET_CPU)" == "i386"
CFLAGS = $(CFLAGS) /DTARGET_CPU_I386
!ENDIF

!IF "$(TARGET_CPU)" == "i860"
CFLAGS = $(CFLAGS) /DTARGET_CPU_I860
!ENDIF

!IF "$(TARGET_CPU)" == "m68k"
CFLAGS = $(CFLAGS) /DTARGET_CPU_M68K
!ENDIF

!IF "$(TARGET_CPU)" == "ns32k"
CFLAGS = $(CFLAGS) /DTARGET_CPU_NS32K
!ENDIF

!IF "$(TARGET_CPU)" == "sparc"
# Only SPARC needs this
CC1OBJ = $(CC1OBJ) isinf.obj
CFLAGS = $(CFLAGS) /DTARGET_CPU_SPARC
!ENDIF

!IF "$(TARGET_CPU)" == "vax"
CFLAGS = $(CFLAGS) /DTARGET_CPU_VAX
!ENDIF

default: cc1.exe cccp.exe xgcc.exe

cc1: cc1.exe

cc1.exe: $(CC1DEPS) $(CC1OBJ) $(CC1INSNOBJ) insn-flags.h insn-config.h
	wlink system nt @cc1.lnk name cc1.exe

cccp.exe: $(CCCPOBJ)
	$(link) $(conflags) -out:cccp.exe $(CCCPOBJ) $(conlibs)


genflags.exe: c-tab.obj c-decl.obj c-typeck.obj c-conv.obj toplev.obj \
	version.obj tree.obj print-tree.obj stor-layout.obj fold-const.obj \
	rtl.obj rtlanal.obj genflags.obj obstack.obj \
	genflags.obj rtl.obj obstack.obj alloca.obj
	wlink file genflags.obj,rtl.obj,obstack.obj,alloca.obj system nt name genflags.exe

.c.obj:
	$(CC) $(CFLAGS) $<

gencodes.exe: gencodes.obj rtl.obj obstack.obj alloca.obj
	wlink file gencodes.obj,rtl.obj,obstack.obj,alloca.obj system nt name gencodes.exe

genconfig.exe: genconfig.obj rtl.obj obstack.obj alloca.obj
	wlink file genconfig.obj,rtl.obj,obstack.obj,alloca.obj system nt name genconfig.exe

genemit.exe: expr.obj stmt.obj expmed.obj explow.obj optabs.obj varasm.obj \
	symout.obj dbxout.obj sdbout.obj emit-rtl.obj genemit.obj \
	insn-config.h insn-flags.h
	wlink file genemit.obj,rtl.obj,obstack.obj,alloca.obj system nt name genemit.exe

genpeep.exe: insn-emt.obj integrate.obj jump.obj cse.obj loop.obj \
	flow.obj stupid.obj combine.obj regclass.obj local-alloc.obj \
	global-alloc.obj reload.obj reload1.obj caller-save.obj genpeep.obj \
	rtl.obj obstack.obj alloca.obj
	wlink file genpeep.obj,rtl.obj,obstack.obj,alloca.obj system nt name genpeep.exe

genrecog.exe: insn-pep.obj final.obj recog.obj genrecog.obj alloca.obj
	wlink file genrecog.obj,rtl.obj,obstack.obj,alloca.obj system nt name genrecog.exe

genextract.exe: insn-rcg.obj genextract.obj alloca.obj
	wlink file genextract.obj,rtl.obj,obstack.obj,alloca.obj system nt name genextract.exe

genoutput.exe: insn-xrt.obj genoutput.obj genoutput.obj rtl.obj obstack.obj alloca.obj
	wlink file genoutput.obj,rtl.obj,obstack.obj,alloca.obj system nt name genoutput.exe

expr.obj: insn-flags.h insn-config.h insn-codes.h

insn-out.c: genoutput.exe
	genoutput.exe $(TARG).md > insn-out.c

insn-xrt.c: genextract.exe
	genextract $(TARG).md > insn-xrt.c

insn-rcg.c: genrecog.exe
	genrecog $(TARG).md > insn-rcg.c

insn-flags.h: genflags.exe
	genflags $(TARG).md > insn-flags.h

insn-codes.h: gencodes.exe
	gencodes $(TARG).md > insn-codes.h

insn-config.h: genconfig.exe
	genconfig $(TARG).md > insn-config.h

insn-emt.c: genemit.exe
	genemit $(TARG).md > insn-emt.c

insn-pep.c: genpeep.exe
	genpeep $(TARG).md > insn-pep.c

c-tab.c: c-parse.y
	copy /Y ..\bison-1.16\bison.simple .
	..\bison-1.16\bison.exe  -v ./c-parse.y -o c-tab.c
	del /Q c-tab.output bison.simple

cexp.c: cexp.y
	copy /Y ..\bison-1.16\bison.simple .
	..\bison-1.16\bison.exe  -v ./cexp.y -o cexp.c
	del /Q cexp.output bison.simple

xgcc.exe: gcc.obj obstack.obj alloca.obj version.obj newargcv.obj mktemp.obj
	wlink file gcc.obj,obstack.obj,alloca.obj,version.obj,newargcv.obj,mktemp.obj system nt name xgcc.exe

clean:
	del /F *.obj
	del /F *.exe
	del /F insn-*
	del /F stamp-*
	del /F c-parse.output c-tab.c c-tab.out cexp.c
	del /F *.err
	